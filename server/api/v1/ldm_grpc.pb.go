// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: api/v1/ldm.proto

package ldm_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LdmClient is the client API for Ldm service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LdmClient interface {
	WriteTile(ctx context.Context, in *WriteTileRequest, opts ...grpc.CallOption) (*WriteTileResponse, error)
	ReadTile(ctx context.Context, in *ReadTileRequest, opts ...grpc.CallOption) (*ReadTileResponse, error)
	ReadTileStream(ctx context.Context, in *ReadTileRequest, opts ...grpc.CallOption) (Ldm_ReadTileStreamClient, error)
	WriteTileStream(ctx context.Context, opts ...grpc.CallOption) (Ldm_WriteTileStreamClient, error)
}

type ldmClient struct {
	cc grpc.ClientConnInterface
}

func NewLdmClient(cc grpc.ClientConnInterface) LdmClient {
	return &ldmClient{cc}
}

func (c *ldmClient) WriteTile(ctx context.Context, in *WriteTileRequest, opts ...grpc.CallOption) (*WriteTileResponse, error) {
	out := new(WriteTileResponse)
	err := c.cc.Invoke(ctx, "/ldm.v1.Ldm/WriteTile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ldmClient) ReadTile(ctx context.Context, in *ReadTileRequest, opts ...grpc.CallOption) (*ReadTileResponse, error) {
	out := new(ReadTileResponse)
	err := c.cc.Invoke(ctx, "/ldm.v1.Ldm/ReadTile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ldmClient) ReadTileStream(ctx context.Context, in *ReadTileRequest, opts ...grpc.CallOption) (Ldm_ReadTileStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Ldm_ServiceDesc.Streams[0], "/ldm.v1.Ldm/ReadTileStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &ldmReadTileStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Ldm_ReadTileStreamClient interface {
	Recv() (*ReadTileResponse, error)
	grpc.ClientStream
}

type ldmReadTileStreamClient struct {
	grpc.ClientStream
}

func (x *ldmReadTileStreamClient) Recv() (*ReadTileResponse, error) {
	m := new(ReadTileResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *ldmClient) WriteTileStream(ctx context.Context, opts ...grpc.CallOption) (Ldm_WriteTileStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Ldm_ServiceDesc.Streams[1], "/ldm.v1.Ldm/WriteTileStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &ldmWriteTileStreamClient{stream}
	return x, nil
}

type Ldm_WriteTileStreamClient interface {
	Send(*WriteTileRequest) error
	Recv() (*WriteTileResponse, error)
	grpc.ClientStream
}

type ldmWriteTileStreamClient struct {
	grpc.ClientStream
}

func (x *ldmWriteTileStreamClient) Send(m *WriteTileRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *ldmWriteTileStreamClient) Recv() (*WriteTileResponse, error) {
	m := new(WriteTileResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// LdmServer is the server API for Ldm service.
// All implementations must embed UnimplementedLdmServer
// for forward compatibility
type LdmServer interface {
	WriteTile(context.Context, *WriteTileRequest) (*WriteTileResponse, error)
	ReadTile(context.Context, *ReadTileRequest) (*ReadTileResponse, error)
	ReadTileStream(*ReadTileRequest, Ldm_ReadTileStreamServer) error
	WriteTileStream(Ldm_WriteTileStreamServer) error
	mustEmbedUnimplementedLdmServer()
}

// UnimplementedLdmServer must be embedded to have forward compatible implementations.
type UnimplementedLdmServer struct {
}

func (UnimplementedLdmServer) WriteTile(context.Context, *WriteTileRequest) (*WriteTileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WriteTile not implemented")
}
func (UnimplementedLdmServer) ReadTile(context.Context, *ReadTileRequest) (*ReadTileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadTile not implemented")
}
func (UnimplementedLdmServer) ReadTileStream(*ReadTileRequest, Ldm_ReadTileStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ReadTileStream not implemented")
}
func (UnimplementedLdmServer) WriteTileStream(Ldm_WriteTileStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method WriteTileStream not implemented")
}
func (UnimplementedLdmServer) mustEmbedUnimplementedLdmServer() {}

// UnsafeLdmServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LdmServer will
// result in compilation errors.
type UnsafeLdmServer interface {
	mustEmbedUnimplementedLdmServer()
}

func RegisterLdmServer(s grpc.ServiceRegistrar, srv LdmServer) {
	s.RegisterService(&Ldm_ServiceDesc, srv)
}

func _Ldm_WriteTile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteTileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LdmServer).WriteTile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ldm.v1.Ldm/WriteTile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LdmServer).WriteTile(ctx, req.(*WriteTileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ldm_ReadTile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadTileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LdmServer).ReadTile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ldm.v1.Ldm/ReadTile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LdmServer).ReadTile(ctx, req.(*ReadTileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ldm_ReadTileStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReadTileRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LdmServer).ReadTileStream(m, &ldmReadTileStreamServer{stream})
}

type Ldm_ReadTileStreamServer interface {
	Send(*ReadTileResponse) error
	grpc.ServerStream
}

type ldmReadTileStreamServer struct {
	grpc.ServerStream
}

func (x *ldmReadTileStreamServer) Send(m *ReadTileResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Ldm_WriteTileStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(LdmServer).WriteTileStream(&ldmWriteTileStreamServer{stream})
}

type Ldm_WriteTileStreamServer interface {
	Send(*WriteTileResponse) error
	Recv() (*WriteTileRequest, error)
	grpc.ServerStream
}

type ldmWriteTileStreamServer struct {
	grpc.ServerStream
}

func (x *ldmWriteTileStreamServer) Send(m *WriteTileResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *ldmWriteTileStreamServer) Recv() (*WriteTileRequest, error) {
	m := new(WriteTileRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Ldm_ServiceDesc is the grpc.ServiceDesc for Ldm service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Ldm_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ldm.v1.Ldm",
	HandlerType: (*LdmServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "WriteTile",
			Handler:    _Ldm_WriteTile_Handler,
		},
		{
			MethodName: "ReadTile",
			Handler:    _Ldm_ReadTile_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ReadTileStream",
			Handler:       _Ldm_ReadTileStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "WriteTileStream",
			Handler:       _Ldm_WriteTileStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "api/v1/ldm.proto",
}
